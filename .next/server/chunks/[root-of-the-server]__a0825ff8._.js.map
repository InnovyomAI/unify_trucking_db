{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 3, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 55, "column": 0}, "map": {"version":3,"sources":["file:///Users/dvskrishna/Business/innovyom/Unify_Trucking_DB/unify_trucking_db/app/api/demo/snapshots/store.ts"],"sourcesContent":["// Simple in-memory snapshot store with TTL.\n// ⚠️ Resets on server restart; good for demos.\nexport type DriverSnapshot = {\n  qrid: string;\n  name: string;\n  jurisdiction: string;\n  licenseNo: string;\n  licenseClass: string;\n  licenseExpiry: string;\n  issuedAt: string; // ISO string\n};\n\nconst TTL_MS = 30 * 60 * 1000; // 30 minutes\nconst snapshots = new Map<string, { data: DriverSnapshot; expiresAt: number }>();\n\nfunction cleanup() {\n  const now = Date.now();\n  for (const [k, v] of snapshots) if (v.expiresAt <= now) snapshots.delete(k);\n}\n\nexport function setSnapshot(s: DriverSnapshot, ttlMs = TTL_MS) {\n  cleanup();\n  snapshots.set(s.qrid, { data: s, expiresAt: Date.now() + ttlMs });\n}\n\nexport function getSnapshot(qrid: string): DriverSnapshot | null {\n  cleanup();\n  const hit = snapshots.get(qrid);\n  if (!hit) return null;\n  if (hit.expiresAt <= Date.now()) {\n    snapshots.delete(qrid);\n    return null;\n  }\n  return hit.data;\n}\n\n"],"names":[],"mappings":"AAAA,4CAA4C;AAC5C,+CAA+C;;;;;;;AAW/C,MAAM,SAAS,KAAK,KAAK,MAAM,aAAa;AAC5C,MAAM,YAAY,IAAI;AAEtB,SAAS;IACP,MAAM,MAAM,KAAK,GAAG;IACpB,KAAK,MAAM,CAAC,GAAG,EAAE,IAAI,UAAW,IAAI,EAAE,SAAS,IAAI,KAAK,UAAU,MAAM,CAAC;AAC3E;AAEO,SAAS,YAAY,CAAiB,EAAE,QAAQ,MAAM;IAC3D;IACA,UAAU,GAAG,CAAC,EAAE,IAAI,EAAE;QAAE,MAAM;QAAG,WAAW,KAAK,GAAG,KAAK;IAAM;AACjE;AAEO,SAAS,YAAY,IAAY;IACtC;IACA,MAAM,MAAM,UAAU,GAAG,CAAC;IAC1B,IAAI,CAAC,KAAK,OAAO;IACjB,IAAI,IAAI,SAAS,IAAI,KAAK,GAAG,IAAI;QAC/B,UAAU,MAAM,CAAC;QACjB,OAAO;IACT;IACA,OAAO,IAAI,IAAI;AACjB","debugId":null}},
    {"offset": {"line": 90, "column": 0}, "map": {"version":3,"sources":["file:///Users/dvskrishna/Business/innovyom/Unify_Trucking_DB/unify_trucking_db/app/api/demo/snapshots/%5Bqrid%5D/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from \"next/server\";\nimport { getSnapshot } from \"../store\";\n\nexport async function GET(_req: NextRequest, ctx: { params: Promise<{ qrid: string }> }) {\n  const { qrid } = await ctx.params;\n  const s = getSnapshot(qrid);\n  if (!s) return NextResponse.json({ error: \"Not found\" }, { status: 404, headers: noStore });\n  return NextResponse.json(s, { headers: noStore });\n}\n\nexport async function HEAD(_req: NextRequest, ctx: { params: Promise<{ qrid: string }> }) {\n  const { qrid } = await ctx.params;\n  const s = getSnapshot(qrid);\n  return new Response(null, { status: s ? 200 : 404, headers: noStore });\n}\n\nconst noStore = { \"Cache-Control\": \"no-store\" } as const;\n"],"names":[],"mappings":";;;;;;AAAA;AACA;;;AAEO,eAAe,IAAI,IAAiB,EAAE,GAA0C;IACrF,MAAM,EAAE,IAAI,EAAE,GAAG,MAAM,IAAI,MAAM;IACjC,MAAM,IAAI,IAAA,yJAAW,EAAC;IACtB,IAAI,CAAC,GAAG,OAAO,+QAAY,CAAC,IAAI,CAAC;QAAE,OAAO;IAAY,GAAG;QAAE,QAAQ;QAAK,SAAS;IAAQ;IACzF,OAAO,+QAAY,CAAC,IAAI,CAAC,GAAG;QAAE,SAAS;IAAQ;AACjD;AAEO,eAAe,KAAK,IAAiB,EAAE,GAA0C;IACtF,MAAM,EAAE,IAAI,EAAE,GAAG,MAAM,IAAI,MAAM;IACjC,MAAM,IAAI,IAAA,yJAAW,EAAC;IACtB,OAAO,IAAI,SAAS,MAAM;QAAE,QAAQ,IAAI,MAAM;QAAK,SAAS;IAAQ;AACtE;AAEA,MAAM,UAAU;IAAE,iBAAiB;AAAW","debugId":null}}]
}