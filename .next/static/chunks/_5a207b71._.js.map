{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 4, "column": 0}, "map": {"version":3,"sources":["file:///Users/dvskrishna/Business/innovyom/Unify_Trucking_DB/unify_trucking_db/lib/license-rules.ts"],"sourcesContent":["// Patterns derived from Microsoft Purview (2024-08-19) + ICBC 8-digit update.\n// https://learn.microsoft.com/en-us/purview/sit-defn-canada-drivers-license-number\n// https://www.icbc.com/about-icbc/newsroom/2023-feb06-DLnumbers\ntype Rule = {\n  // Replace typed letters/digits with mask (we add hyphens/spaces)\n  format: (raw: string) => string;\n  // Acceptable normalized pattern (strip hyphens/spaces before testing)\n  test: (normalized: string) => boolean;\n};\n\nfunction onlyAZ09(s: string) {\n  return s.toUpperCase().replace(/[^A-Z0-9]/g, \"\");\n}\nfunction stripSep(s: string) {\n  return s.replace(/[\\s-]/g, \"\");\n}\n// chunk helper was used in previous rules; removed after MB rule update\n\nexport const caRules: Record<string, Rule> = {\n  // Alberta: 6 digits - 3 digits OR 5-9 digits (Purview). We'll normalize to 9 digits or 6-3 display.\n  \"CA-AB\": {\n    format: (raw) => {\n      const s = raw.replace(/\\D/g, \"\").slice(0, 9);\n      return s.length > 6 ? `${s.slice(0, 6)}-${s.slice(6)}` : s;\n    },\n    test: (n) => /^\\d{9}$/.test(n) || /^\\d{5,9}$/.test(n),\n  },\n  // BC: historically 7 digits; since 2023, 8 digits permitted.\n  \"CA-BC\": {\n    format: (raw) => raw.replace(/\\D/g, \"\").slice(0, 8),\n    test: (n) => /^\\d{7,8}$/.test(n),\n  },\n  // CA-MB: display as 2-2-2-6 (e.g., DA-GG-UV-S057NT), store alnum only (12 chars typical).\n  \"CA-MB\": {\n    format: (raw) => {\n      const s = onlyAZ09(raw).slice(0, 12);\n      // group 2-2-2-6\n      if (!s) return \"\";\n      const a = s.slice(0, 2),\n        b = s.slice(2, 4),\n        c = s.slice(4, 6),\n        d = s.slice(6);\n      return [a, b, c, d].filter(Boolean).join(\"-\");\n    },\n    // Canonical 12 alphanumerics\n    test: (n) => /^[A-Z0-9]{12}$/.test(n),\n  },\n  // New Brunswick: 5–7 digits\n  \"CA-NB\": { format: (r) => r.replace(/\\D/g, \"\").slice(0, 7), test: (n) => /^\\d{5,7}$/.test(n) },\n  // Newfoundland & Labrador: 1 letter + 9 digits\n  \"CA-NL\": {\n    format: (raw) => {\n      const s = onlyAZ09(raw);\n      return (s.slice(0, 1) + s.slice(1, 10)).toUpperCase();\n    },\n    test: (n) => /^[A-Z]\\d{9}$/.test(n),\n  },\n  // Nova Scotia: Purview shows letter-heavy pattern; accept 14-char mixed alnum.\n  \"CA-NS\": {\n    format: (raw) => onlyAZ09(raw).slice(0, 14),\n    test: (n) => /^[A-Z0-9]{6,14}$/.test(n),\n  },\n  // Ontario: letter + 4 digits + 5 digits + 5 digits (display with hyphens)\n  \"CA-ON\": {\n    format: (raw) => {\n      const s = onlyAZ09(raw).slice(0, 14); // A#### ##### #####\n      const a = s.slice(0, 1),\n        b = s.slice(1, 5),\n        c = s.slice(5, 10),\n        d = s.slice(10, 15);\n      return [a + b, c, d].filter(Boolean).join(\"-\");\n    },\n    test: (n) => /^[A-Z]\\d{14}$/.test(n),\n  },\n  // Prince Edward Island: 5–6 digits\n  \"CA-PE\": { format: (r) => r.replace(/\\D/g, \"\").slice(0, 6), test: (n) => /^\\d{5,6}$/.test(n) },\n  // Quebec: 1 letter + 12 digits\n  \"CA-QC\": {\n    format: (raw) => {\n      const s = onlyAZ09(raw);\n      return (s.slice(0, 1) + s.slice(1, 13)).toUpperCase();\n    },\n    test: (n) => /^[A-Z]\\d{12}$/.test(n),\n  },\n  // Saskatchewan: 8 digits\n  \"CA-SK\": { format: (r) => r.replace(/\\D/g, \"\").slice(0, 8), test: (n) => /^\\d{8}$/.test(n) },\n  // Territories & others (fallback): allow 5–15 alphanumerics\n  \"CA-DEFAULT\": { format: (r) => onlyAZ09(r).slice(0, 15), test: (n) => /^[A-Z0-9]{5,15}$/.test(n) },\n};\n\nexport function formatLicence(jurisdiction: string, input: string) {\n  const fallback = caRules[\"CA-DEFAULT\"] as Rule;\n  const rule = (caRules[jurisdiction] ?? fallback) as Rule;\n  return rule.format(input);\n}\nexport function isValidLicence(jurisdiction: string, input: string) {\n  const fallback = caRules[\"CA-DEFAULT\"] as Rule;\n  const rule = (caRules[jurisdiction] ?? fallback) as Rule;\n  return rule.test(stripSep(input.toUpperCase()));\n}\nexport function normalizedLicence(input: string) {\n  return stripSep(input.toUpperCase());\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 131, "column": 0}, "map": {"version":3,"sources":["file:///Users/dvskrishna/Business/innovyom/Unify_Trucking_DB/unify_trucking_db/lib/postal.ts"],"sourcesContent":["export function detectCA(postalRaw: string): { ok: boolean; normalized?: string; province?: string } {\n  const s = postalRaw.toUpperCase().replace(/\\s+/g, \"\");\n  const re = /^[ABCEGHJ-NPRSTVXY]\\d[A-Z]\\d[A-Z]\\d$/; // Canada Post\n  if (!re.test(s)) return { ok: false };\n  const norm = `${s.slice(0, 3)} ${s.slice(3)}`;\n  const first = s.charAt(0);\n  const PROV: Record<string, string> = {\n    A: \"NL\",\n    B: \"NS\",\n    C: \"PE\",\n    E: \"NB\",\n    G: \"QC\",\n    H: \"QC\",\n    J: \"QC\",\n    K: \"ON\",\n    L: \"ON\",\n    M: \"ON\",\n    N: \"ON\",\n    P: \"ON\",\n    R: \"MB\",\n    S: \"SK\",\n    T: \"AB\",\n    V: \"BC\",\n    Y: \"YT\",\n    X: \"NT\", // Note: NU also uses X\n  };\n  const province = PROV[first] ?? undefined;\n  return { ok: true, normalized: norm, province };\n}\n\nexport function isUSZip(raw: string) {\n  return /^\\d{5}(-\\d{4})?$/.test(raw.trim());\n}\n"],"names":[],"mappings":";;;;;;AAAO,SAAS,SAAS,SAAiB;IACxC,MAAM,IAAI,UAAU,WAAW,GAAG,OAAO,CAAC,QAAQ;IAClD,MAAM,KAAK,wCAAwC,cAAc;IACjE,IAAI,CAAC,GAAG,IAAI,CAAC,IAAI,OAAO;QAAE,IAAI;IAAM;IACpC,MAAM,OAAO,AAAC,GAAmB,OAAjB,EAAE,KAAK,CAAC,GAAG,IAAG,KAAc,OAAX,EAAE,KAAK,CAAC;IACzC,MAAM,QAAQ,EAAE,MAAM,CAAC;IACvB,MAAM,OAA+B;QACnC,GAAG;QACH,GAAG;QACH,GAAG;QACH,GAAG;QACH,GAAG;QACH,GAAG;QACH,GAAG;QACH,GAAG;QACH,GAAG;QACH,GAAG;QACH,GAAG;QACH,GAAG;QACH,GAAG;QACH,GAAG;QACH,GAAG;QACH,GAAG;QACH,GAAG;QACH,GAAG;IACL;QACiB;IAAjB,MAAM,WAAW,CAAA,cAAA,IAAI,CAAC,MAAM,cAAX,yBAAA,cAAe;IAChC,OAAO;QAAE,IAAI;QAAM,YAAY;QAAM;IAAS;AAChD;AAEO,SAAS,QAAQ,GAAW;IACjC,OAAO,mBAAmB,IAAI,CAAC,IAAI,IAAI;AACzC","debugId":null}},
    {"offset": {"line": 183, "column": 0}, "map": {"version":3,"sources":["file:///Users/dvskrishna/Business/innovyom/Unify_Trucking_DB/unify_trucking_db/lib/license-classes.ts"],"sourcesContent":["export const CA_CLASSES: Record<string, string[]> = {\n  \"CA-MB\": [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\"],\n  \"CA-ON\": [\"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"M\"],\n  \"CA-BC\": [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\"],\n  \"CA-AB\": [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\"],\n  \"CA-SK\": [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\"],\n  \"CA-QC\": [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\"],\n  \"CA-NB\": [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\"],\n  \"CA-NL\": [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\"],\n  \"CA-NS\": [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\"],\n  \"CA-PE\": [\"1\", \"2\", \"3\", \"4\", \"5\"],\n};\n\nexport function classesFor(jurisdiction: string): string[] {\n  return CA_CLASSES[jurisdiction] ?? [];\n}\n\n"],"names":[],"mappings":";;;;;;AAAO,MAAM,aAAuC;IAClD,SAAS;QAAC;QAAK;QAAK;QAAK;QAAK;QAAK;KAAI;IACvC,SAAS;QAAC;QAAK;QAAK;QAAK;QAAK;QAAK;QAAK;QAAK;KAAI;IACjD,SAAS;QAAC;QAAK;QAAK;QAAK;QAAK;QAAK;QAAK;QAAK;KAAI;IACjD,SAAS;QAAC;QAAK;QAAK;QAAK;QAAK;QAAK;QAAK;KAAI;IAC5C,SAAS;QAAC;QAAK;QAAK;QAAK;QAAK;QAAK;QAAK;KAAI;IAC5C,SAAS;QAAC;QAAK;QAAK;QAAK;QAAK;QAAK;KAAI;IACvC,SAAS;QAAC;QAAK;QAAK;QAAK;QAAK;QAAK;QAAK;KAAI;IAC5C,SAAS;QAAC;QAAK;QAAK;QAAK;QAAK;QAAK;KAAI;IACvC,SAAS;QAAC;QAAK;QAAK;QAAK;QAAK;QAAK;QAAK;KAAI;IAC5C,SAAS;QAAC;QAAK;QAAK;QAAK;QAAK;KAAI;AACpC;AAEO,SAAS,WAAW,YAAoB;QACtC;IAAP,OAAO,CAAA,2BAAA,UAAU,CAAC,aAAa,cAAxB,sCAAA,2BAA4B,EAAE;AACvC","debugId":null}},
    {"offset": {"line": 289, "column": 0}, "map": {"version":3,"sources":["file:///Users/dvskrishna/Business/innovyom/Unify_Trucking_DB/unify_trucking_db/lib/passport/patterns.ts"],"sourcesContent":["export type PassportPattern = {\n  re: RegExp;\n  maxLen?: number;\n  minLen?: number;\n  hint: string;\n};\n\n// Canonical normalizer: uppercase and strip spaces/hyphens/dots\nexport function canon(s: string): string {\n  return (s || \"\").toUpperCase().replace(/[\\s\\-.]/g, \"\");\n}\n\n// Country-specific patterns (initial coverage + expand as needed)\nexport const PASSPORT: Record<string, PassportPattern> = {\n  CA: { re: /^[A-Z]{2}\\d{6}$/, minLen: 8, maxLen: 8, hint: \"AA123456\" },\n  US: { re: /^([A-Z]\\d{8}|\\d{9})$/, minLen: 9, maxLen: 9, hint: \"A12345678 or 123456789\" },\n  IN: { re: /^[A-Z]\\d{7}$/, minLen: 8, maxLen: 8, hint: \"A1234567\" },\n  PH: { re: /^([A-Z]\\d{6}|[A-Z]{2}\\d{6,7}|[A-Z]\\d{7}[A-Z])$/, minLen: 7, maxLen: 9, hint: \"P1234567 / AB123456 / AB1234567\" },\n  GB: { re: /^\\d{9}$/, minLen: 9, maxLen: 9, hint: \"123456789\" },\n  PK: { re: /^[A-Z]{2}\\d{7}$/, minLen: 9, maxLen: 9, hint: \"AB1234567\" },\n  BD: { re: /^[A-Z]\\d{7}$/, minLen: 8, maxLen: 8, hint: \"A1234567\" },\n  NG: { re: /^[A-Z]\\d{8}$/, minLen: 9, maxLen: 9, hint: \"A12345678\" },\n  CN: { re: /^[EGDSP]\\d{8}$/, minLen: 9, maxLen: 9, hint: \"E12345678\" },\n  MX: { re: /^[A-Z]\\d{8}$/, minLen: 9, maxLen: 9, hint: \"A12345678\" },\n};\n\n// Fallback for countries without a specific rule: 6–10 alphanumerics\nexport const FALLBACK: PassportPattern = {\n  re: /^[A-Z0-9]{6,10}$/,\n  minLen: 6,\n  maxLen: 10,\n  hint: \"6–10 letters/digits\",\n};\n\n"],"names":[],"mappings":";;;;;;;;AAQO,SAAS,MAAM,CAAS;IAC7B,OAAO,CAAC,KAAK,EAAE,EAAE,WAAW,GAAG,OAAO,CAAC,YAAY;AACrD;AAGO,MAAM,WAA4C;IACvD,IAAI;QAAE,IAAI;QAAmB,QAAQ;QAAG,QAAQ;QAAG,MAAM;IAAW;IACpE,IAAI;QAAE,IAAI;QAAwB,QAAQ;QAAG,QAAQ;QAAG,MAAM;IAAyB;IACvF,IAAI;QAAE,IAAI;QAAgB,QAAQ;QAAG,QAAQ;QAAG,MAAM;IAAW;IACjE,IAAI;QAAE,IAAI;QAAkD,QAAQ;QAAG,QAAQ;QAAG,MAAM;IAAkC;IAC1H,IAAI;QAAE,IAAI;QAAW,QAAQ;QAAG,QAAQ;QAAG,MAAM;IAAY;IAC7D,IAAI;QAAE,IAAI;QAAmB,QAAQ;QAAG,QAAQ;QAAG,MAAM;IAAY;IACrE,IAAI;QAAE,IAAI;QAAgB,QAAQ;QAAG,QAAQ;QAAG,MAAM;IAAW;IACjE,IAAI;QAAE,IAAI;QAAgB,QAAQ;QAAG,QAAQ;QAAG,MAAM;IAAY;IAClE,IAAI;QAAE,IAAI;QAAkB,QAAQ;QAAG,QAAQ;QAAG,MAAM;IAAY;IACpE,IAAI;QAAE,IAAI;QAAgB,QAAQ;QAAG,QAAQ;QAAG,MAAM;IAAY;AACpE;AAGO,MAAM,WAA4B;IACvC,IAAI;IACJ,QAAQ;IACR,QAAQ;IACR,MAAM;AACR","debugId":null}},
    {"offset": {"line": 375, "column": 0}, "map": {"version":3,"sources":["file:///Users/dvskrishna/Business/innovyom/Unify_Trucking_DB/unify_trucking_db/lib/countries.ts"],"sourcesContent":["import countries from \"i18n-iso-countries\";\nimport en from \"i18n-iso-countries/langs/en.json\";\n\n// Workaround: i18n-iso-countries expects a locale object shape\ntype LocaleData = { locale: string; countries: Record<string, string> };\ncountries.registerLocale(en as unknown as LocaleData);\n\nexport type Country = { code: string; name: string };\n\n/**\n * Return all countries with ISO alpha-2 code and English official name.\n * Sorted alphabetically by name.\n */\nexport function allCountries(): Country[] {\n  const names = countries.getNames(\"en\", { select: \"official\" }) as Record<\n    string,\n    string\n  >;\n\n  return Object.entries(names)\n    .map(([code, name]) => ({\n      code: code.toUpperCase(),\n      name,\n    }))\n    .sort((a, b) => a.name.localeCompare(b.name));\n}\n\n/**\n * Check if a given code is a valid ISO alpha-2 country code.\n */\nexport function isCountry(code?: string): boolean {\n  if (!code) return false;\n  const c = code.toUpperCase();\n  try {\n    return Boolean(countries.alpha2ToNumeric(c));\n  } catch {\n    return false;\n  }\n}\n"],"names":[],"mappings":";;;;;;AAAA;AACA;;;AAIA,qOAAS,CAAC,cAAc,CAAC,gNAAE;AAQpB,SAAS;IACd,MAAM,QAAQ,qOAAS,CAAC,QAAQ,CAAC,MAAM;QAAE,QAAQ;IAAW;IAK5D,OAAO,OAAO,OAAO,CAAC,OACnB,GAAG,CAAC;YAAC,CAAC,MAAM,KAAK;eAAM;YACtB,MAAM,KAAK,WAAW;YACtB;QACF;OACC,IAAI,CAAC,CAAC,GAAG,IAAM,EAAE,IAAI,CAAC,aAAa,CAAC,EAAE,IAAI;AAC/C;AAKO,SAAS,UAAU,IAAa;IACrC,IAAI,CAAC,MAAM,OAAO;IAClB,MAAM,IAAI,KAAK,WAAW;IAC1B,IAAI;QACF,OAAO,QAAQ,qOAAS,CAAC,eAAe,CAAC;IAC3C,EAAE,UAAM;QACN,OAAO;IACT;AACF","debugId":null}},
    {"offset": {"line": 414, "column": 0}, "map": {"version":3,"sources":["file:///Users/dvskrishna/Business/innovyom/Unify_Trucking_DB/unify_trucking_db/lib/passport/validate.ts"],"sourcesContent":["import { canon, PASSPORT, FALLBACK, type PassportPattern } from \"./patterns\";\nimport { isCountry } from \"@/lib/countries\";\n\n/**\n * Return the passport pattern metadata for a given ISO2 country code.\n * Falls back to a sensible generic pattern (6–10 alnum) if unknown.\n */\nexport function passportPatternFor(country?: string): PassportPattern {\n  const code = (country || \"\").toUpperCase();\n  if (!isCountry(code)) return FALLBACK;\n  return PASSPORT[code] ?? FALLBACK;\n}\n\n/**\n * Validate a passport number against a country's known pattern.\n * Uses canonicalized (uppercase, alnum-only) value.\n */\nexport function isValidPassport(country: string | undefined, value: string): boolean {\n  const pat = passportPatternFor(country);\n  return pat.re.test(canon(value));\n}\n\n/**\n * Normalize a passport number for storage/compare:\n * - Uppercase\n * - Strip all non A–Z / 0–9\n */\nexport function normalizePassport(value: string): string {\n  return canon(value);\n}\n\n/**\n * Sanitize user input for a given country while typing:\n * - Uppercase alnum only\n * - Clip to country-specific maxLen when provided\n */\nexport function sanitizePassportInput(value: string, country?: string): string {\n  const pat = passportPatternFor(country);\n  let v = canon(value);\n  if (typeof pat.maxLen === \"number\" && pat.maxLen > 0) {\n    v = v.slice(0, pat.maxLen);\n  }\n  return v;\n}\n\n/**\n * Convenience: get a friendly hint string for the given country.\n * Falls back to generic text.\n */\nexport function passportHint(country?: string): string {\n  const pat = passportPatternFor(country);\n  return pat.hint || \"6–10 letters/digits\";\n}\n"],"names":[],"mappings":";;;;;;;;;;;;AAAA;AACA;;;AAMO,SAAS,mBAAmB,OAAgB;IACjD,MAAM,OAAO,CAAC,WAAW,EAAE,EAAE,WAAW;IACxC,IAAI,CAAC,IAAA,gIAAS,EAAC,OAAO,OAAO,0IAAQ;QAC9B;IAAP,OAAO,CAAA,iBAAA,0IAAQ,CAAC,KAAK,cAAd,4BAAA,iBAAkB,0IAAQ;AACnC;AAMO,SAAS,gBAAgB,OAA2B,EAAE,KAAa;IACxE,MAAM,MAAM,mBAAmB;IAC/B,OAAO,IAAI,EAAE,CAAC,IAAI,CAAC,IAAA,uIAAK,EAAC;AAC3B;AAOO,SAAS,kBAAkB,KAAa;IAC7C,OAAO,IAAA,uIAAK,EAAC;AACf;AAOO,SAAS,sBAAsB,KAAa,EAAE,OAAgB;IACnE,MAAM,MAAM,mBAAmB;IAC/B,IAAI,IAAI,IAAA,uIAAK,EAAC;IACd,IAAI,OAAO,IAAI,MAAM,KAAK,YAAY,IAAI,MAAM,GAAG,GAAG;QACpD,IAAI,EAAE,KAAK,CAAC,GAAG,IAAI,MAAM;IAC3B;IACA,OAAO;AACT;AAMO,SAAS,aAAa,OAAgB;IAC3C,MAAM,MAAM,mBAAmB;IAC/B,OAAO,IAAI,IAAI,IAAI;AACrB","debugId":null}},
    {"offset": {"line": 462, "column": 0}, "map": {"version":3,"sources":["file:///Users/dvskrishna/Business/innovyom/Unify_Trucking_DB/unify_trucking_db/lib/register-schemas.ts"],"sourcesContent":["import { z } from \"zod\";\nimport { isValidLicence, normalizedLicence } from \"@/lib/license-rules\";\nimport { detectCA, isUSZip } from \"@/lib/postal\";\nimport { classesFor } from \"@/lib/license-classes\";\nimport {\n  passportPatternFor,\n  isValidPassport,\n  normalizePassport,\n} from \"@/lib/passport/validate\";\nimport { isCountry } from \"@/lib/countries\";\n\n/** yyyy-mm-dd string */\nconst dateISO = z\n  .string()\n  .regex(/^\\d{4}-\\d{2}-\\d{2}$/, \"Use YYYY-MM-DD\");\n\nconst NAME = z\n  .string()\n  .trim()\n  .min(2, \"Enter at least 2 characters\")\n  .max(60, \"Too long\")\n  .regex(/^[A-Za-zÀ-ÖØ-öø-ÿ' -]+$/, \"Letters, spaces, hyphens, apostrophes only\");\n\nconst JURISDICTION = z.enum(\n  [\n    \"CA-AB\",\"CA-BC\",\"CA-MB\",\"CA-NB\",\"CA-NL\",\"CA-NS\",\"CA-ON\",\"CA-PE\",\"CA-QC\",\"CA-SK\",\"CA-YT\",\"CA-NT\",\"CA-NU\",\n  ],\n  { message: \"Select issuing authority\" },\n);\n\nconst EMAIL = z.string().email(\"Enter a valid email\");\n\n/** Digits-only (no +1 here). We keep UI to CA only. */\nconst PHONE_COUNTRY = z.enum([\"CA\"]).default(\"CA\");\nconst PHONE_DIGITS = z\n  .string()\n  .regex(/^\\d{10}$/, \"Enter a 10-digit Canadian phone number\");\n\nconst LICENSE_NO = z\n  .string()\n  .trim()\n  .min(3, \"Enter licence number\")\n  .max(20, \"Too long\")\n  .regex(/^[A-Za-z0-9-]+$/, \"Letters/numbers only\");\n\nconst ENGLISH_LEVEL = z.enum([\"Basic\", \"Conversational\", \"Fluent\", \"Native\"]);\n\nconst PASSPORT_NUMBER_GENERIC = z\n  .string()\n  .trim()\n  .toUpperCase()\n  .regex(/^[A-Z0-9]{6,10}$/, \"6–10 letters/digits\");\n\nconst PR_CARD_NUMBER = z\n  .string()\n  .trim()\n  .toUpperCase()\n  .regex(/^[A-Z]{2}\\d{8}$/, \"Format like AB12345678\");\n\nconst FILE_REQUIRED = z.instanceof(File, { message: \"File required\" });\n\nexport const RegisterSchema = z\n  .object({\n\n    // Names\n    givenName: NAME,\n    surname: NAME,\n    middleName: z.string().trim().max(60).optional().or(z.literal(\"\")),\n    givenNameKey: z.string().optional(),\n    surnameKey: z.string().optional(),\n\n    // Licence & jurisdiction\n    jurisdiction: JURISDICTION,\n    licenseNo: LICENSE_NO,\n    licenseClass: z.string().min(1, \"Select class\").max(5),\n    airBrake: z.boolean().optional(),\n    licenseExpiry: dateISO,\n    dob: dateISO,\n    gender: z.enum([\"Male\", \"Female\", \"Non-binary\", \"Prefer not to say\"]).optional(),\n\n    // Contact\n    email: EMAIL,\n    phone: PHONE_DIGITS,\n    phoneCountry: PHONE_COUNTRY,\n\n    // Address\n    address1: z.string().trim().max(100).optional().or(z.literal(\"\")),\n    address2: z.string().trim().max(100).optional().or(z.literal(\"\")),\n    city: z.string().trim().max(60).optional().or(z.literal(\"\")),\n    region: z.string().trim().max(40).optional().or(z.literal(\"\")),\n    postal: z.string().trim().min(3, \"Enter postal/ZIP\"),\n    addressCountry: z.string().trim().length(2, \"Use ISO2 (e.g., CA)\").optional(),\n\n    // Status\n    citizenship: z.enum([\"Canadian Citizen\", \"Non-Citizen\"]).default(\"Canadian Citizen\"),\n    residencyCA: z.enum([\"Citizen\", \"Permanent Resident\", \"Work Permit\", \"Study Permit\"]).default(\"Citizen\"),\n    prNumber: z.string().optional(),\n    permitType: z.string().optional(),\n    permitExpiry: dateISO.optional(),\n    uci: z.string().optional(),\n\n    // Passport\n    passportCountry: z.string().optional(),\n    passportNumber: z.string().optional(),\n\n    // Languages\n    englishLevel: ENGLISH_LEVEL,\n    otherLanguages: z\n      .array(z.object({ language: z.string().min(1, \"Choose a language\"), level: ENGLISH_LEVEL }))\n      .max(20)\n      .optional(),\n\n    // Work experience\n    work: z\n      .array(\n        z\n          .object({\n            company: z.string().trim().min(2, \"Enter company\"),\n            role: z.string().trim().min(2, \"Enter role\"),\n            start: dateISO,\n            end: dateISO,\n          })\n          .refine((w) => new Date(w.start) <= new Date(w.end), {\n            message: \"From must be before To\",\n            path: [\"end\"],\n          }),\n      )\n      .max(10)\n      .optional(),\n\n    // Consent\n    consentAbstract: z.boolean().refine((v) => v === true, { message: \"Consent is required\" }),\n    consentName: NAME,\n    consentDate: dateISO,\n    certifyAccurate: z.boolean().refine((v) => v === true, { message: \"You must certify accuracy\" }),\n\n    // Documents\n    docLicenseFront: FILE_REQUIRED,\n    docLicenseBack: FILE_REQUIRED,\n    docHealthCard: FILE_REQUIRED,\n    docPassport: z.instanceof(File).optional(),\n    docPR: z.instanceof(File).optional(),\n    docPermit: z.instanceof(File).optional(),\n  })\n  .superRefine((v, ctx) => {\n    // Age >= 16, licence expiry future\n    const today = new Date();\n    const minDob = new Date(today.getFullYear() - 16, today.getMonth(), today.getDate());\n    const dob = new Date(v.dob);\n    const exp = new Date(v.licenseExpiry);\n    if (isNaN(dob.getTime()) || dob > minDob) {\n      ctx.addIssue({ code: \"custom\", path: [\"dob\"], message: \"Driver must be at least 16 years old\" });\n    }\n    if (isNaN(exp.getTime()) || exp < today) {\n      ctx.addIssue({ code: \"custom\", path: [\"licenseExpiry\"], message: \"Expiry must be in the future\" });\n    }\n\n    // Licence checks\n    if (!isValidLicence(v.jurisdiction, v.licenseNo)) {\n      ctx.addIssue({ code: \"custom\", path: [\"licenseNo\"], message: \"Number doesn’t match jurisdiction format\" });\n    }\n    const allowed = classesFor(v.jurisdiction);\n    if (allowed.length > 0 && !allowed.includes(v.licenseClass)) {\n      ctx.addIssue({ code: \"custom\", path: [\"licenseClass\"], message: `Select a valid class for ${v.jurisdiction}` });\n    }\n\n    // Postal\n    if (!detectCA(v.postal).ok && !isUSZip(v.postal)) {\n      ctx.addIssue({ code: \"custom\", path: [\"postal\"], message: \"Enter a valid Canadian postal code or US ZIP\" });\n    }\n\n    // Citizenship / residency logic\n    if (v.citizenship === \"Canadian Citizen\" && v.residencyCA !== \"Citizen\") {\n      ctx.addIssue({ code: \"custom\", path: [\"residencyCA\"], message: \"Canadian citizens must select Citizen\" });\n    }\n\n    if (v.citizenship === \"Non-Citizen\") {\n      if (!v.passportCountry || !isCountry(v.passportCountry)) {\n        ctx.addIssue({ code: \"custom\", path: [\"passportCountry\"], message: \"Select a valid country\" });\n      }\n      if (!v.passportNumber?.trim()) {\n        ctx.addIssue({ code: \"custom\", path: [\"passportNumber\"], message: \"Enter passport number\" });\n      } else if (v.passportCountry) {\n        const ok =\n          isValidPassport(v.passportCountry, v.passportNumber) ||\n          PASSPORT_NUMBER_GENERIC.safeParse(v.passportNumber).success;\n        if (!ok) {\n          const pat = passportPatternFor(v.passportCountry);\n          ctx.addIssue({\n            code: \"custom\",\n            path: [\"passportNumber\"],\n            message: `Format doesn’t match (${pat.hint || \"6–10 letters/digits\"})`,\n          });\n        }\n      }\n      if (!v.docPassport) {\n        ctx.addIssue({ code: \"custom\", path: [\"docPassport\"], message: \"Upload passport image\" });\n      }\n    }\n\n    if (v.residencyCA === \"Permanent Resident\") {\n      if (!v.prNumber || !PR_CARD_NUMBER.safeParse(v.prNumber).success) {\n        ctx.addIssue({ code: \"custom\", path: [\"prNumber\"], message: \"PR card number must look like AB12345678\" });\n      }\n      if (!v.docPR) ctx.addIssue({ code: \"custom\", path: [\"docPR\"], message: \"Upload PR card image\" });\n    }\n\n    if (v.residencyCA === \"Work Permit\" || v.residencyCA === \"Study Permit\") {\n      if (!v.docPermit) ctx.addIssue({ code: \"custom\", path: [\"docPermit\"], message: \"Upload permit document image\" });\n      if (v.residencyCA === \"Work Permit\" && !v.permitType?.trim()) {\n        ctx.addIssue({ code: \"custom\", path: [\"permitType\"], message: \"Select permit type\" });\n      }\n    }\n\n    // File size/type checks\n    ([\n      [\"docLicenseFront\", v.docLicenseFront],\n      [\"docLicenseBack\", v.docLicenseBack],\n      [\"docHealthCard\", v.docHealthCard],\n      [\"docPassport\", v.docPassport],\n      [\"docPR\", v.docPR],\n      [\"docPermit\", v.docPermit],\n    ] as const).forEach(([path, f]) => {\n      const file = f as File | undefined;\n      if (file) {\n        const okType = [\"image/jpeg\", \"image/png\"].includes(file.type);\n        const okSize = file.size <= 4 * 1024 * 1024;\n        if (!okType || !okSize) {\n          ctx.addIssue({ code: \"custom\", path: [path], message: \"Upload JPG/PNG ≤ 4MB\" });\n        }\n      }\n    });\n  });\n\nexport type RegisterValues = z.infer<typeof RegisterSchema>;\n\n/** Normalize before storage */\nexport function normalizeForStorage<T extends {\n  licenseNo: string;\n  phone: string;\n  phoneCountry: \"CA\";\n  passportCountry?: string;\n  passportNumber?: string;\n  prNumber?: string;\n  uci?: string;\n}>(values: T): T {\n  const out = { ...values };\n  out.licenseNo = normalizedLicence(out.licenseNo);\n  if (out.phoneCountry === \"CA\" && /^\\d{10}$/.test(out.phone)) {\n    (out as any).phone = `+1${out.phone}`;\n  }\n  if (out.passportCountry && out.passportNumber) {\n    (out as any).passportNumber = normalizePassport(out.passportNumber);\n  } else {\n    (out as any).passportNumber = undefined;\n  }\n  if (out.prNumber) (out as any).prNumber = out.prNumber.toUpperCase();\n  if (out.uci) (out as any).uci = out.uci.replace(/\\D/g, \"\");\n  return out;\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 819, "column": 0}, "map": {"version":3,"sources":["file:///Users/dvskrishna/Business/innovyom/Unify_Trucking_DB/unify_trucking_db/components/pdf/DriverCardPDF.tsx"],"sourcesContent":["/* eslint-disable jsx-a11y/alt-text */\n\"use client\";\nimport { Document, Page, View, Text, Image, StyleSheet } from \"@react-pdf/renderer\";\n\nconst styles = StyleSheet.create({\n  page: { padding: 20, fontSize: 10, color: \"#0A0F1F\" },\n  card: { borderWidth: 1, borderColor: \"#e5e7eb\", padding: 12, borderRadius: 6 },\n  row: { flexDirection: \"row\", gap: 10 },\n  col: { flexGrow: 1 },\n  title: { fontSize: 14, marginBottom: 6 },\n  label: { color: \"#6b7280\" },\n});\n\nexport default function DriverCardPDF({\n  name,\n  qrPng,\n}: {\n  name: string;\n  qrPng: string;\n}) {\n  return (\n    <Document>\n      <Page size=\"A6\" style={styles.page}>\n        <View style={styles.card}>\n          <Text style={styles.title}>Driver Identity Card</Text>\n          <View style={styles.row}>\n            <View style={styles.col}>\n              <Text>\n                <Text style={styles.label}>Name: </Text>{name}\n              </Text>\n            </View>\n            <Image src={qrPng} style={{ width: 120, height: 120 }} />\n          </View>\n          <Text style={{ marginTop: 8, color: \"#6b7280\" }}>\n            Scan for live verification. QR encodes only a random ID; no personal details.\n          </Text>\n        </View>\n      </Page>\n    </Document>\n  );\n}\n"],"names":[],"mappings":"AAAA,oCAAoC;;;;;AAEpC;AAAA;AADA;;;AAGA,MAAM,SAAS,0SAAU,CAAC,MAAM,CAAC;IAC/B,MAAM;QAAE,SAAS;QAAI,UAAU;QAAI,OAAO;IAAU;IACpD,MAAM;QAAE,aAAa;QAAG,aAAa;QAAW,SAAS;QAAI,cAAc;IAAE;IAC7E,KAAK;QAAE,eAAe;QAAO,KAAK;IAAG;IACrC,KAAK;QAAE,UAAU;IAAE;IACnB,OAAO;QAAE,UAAU;QAAI,cAAc;IAAE;IACvC,OAAO;QAAE,OAAO;IAAU;AAC5B;AAEe,SAAS,cAAc,KAMrC;QANqC,EACpC,IAAI,EACJ,KAAK,EAIN,GANqC;IAOpC,qBACE,4TAAC,oPAAQ;kBACP,cAAA,4TAAC,gPAAI;YAAC,MAAK;YAAK,OAAO,OAAO,IAAI;sBAChC,cAAA,4TAAC,gPAAI;gBAAC,OAAO,OAAO,IAAI;;kCACtB,4TAAC,gPAAI;wBAAC,OAAO,OAAO,KAAK;kCAAE;;;;;;kCAC3B,4TAAC,gPAAI;wBAAC,OAAO,OAAO,GAAG;;0CACrB,4TAAC,gPAAI;gCAAC,OAAO,OAAO,GAAG;0CACrB,cAAA,4TAAC,gPAAI;;sDACH,4TAAC,gPAAI;4CAAC,OAAO,OAAO,KAAK;sDAAE;;;;;;wCAAc;;;;;;;;;;;;0CAG7C,4TAAC,iPAAK;gCAAC,KAAK;gCAAO,OAAO;oCAAE,OAAO;oCAAK,QAAQ;gCAAI;;;;;;;;;;;;kCAEtD,4TAAC,gPAAI;wBAAC,OAAO;4BAAE,WAAW;4BAAG,OAAO;wBAAU;kCAAG;;;;;;;;;;;;;;;;;;;;;;AAO3D;KA3BwB","debugId":null}},
    {"offset": {"line": 955, "column": 0}, "map": {"version":3,"sources":["file:///Users/dvskrishna/Business/innovyom/Unify_Trucking_DB/unify_trucking_db/lib/qr.ts"],"sourcesContent":["import QRCode from \"qrcode\";\n\n// Now the QR encodes only a version + a URL with a random qrid.\n// No licence, no jurisdiction, no PII.\nexport function buildQrPayload(input: { qrid: string; origin?: string }) {\n  const origin =\n    input.origin ?? (typeof window !== \"undefined\" ? window.location.origin : \"https://example.org\");\n  return {\n    v: 1,\n    url: `${origin}/v/${input.qrid}`,\n  };\n}\n\nexport async function makeQrPng(payload: object) {\n  return QRCode.toDataURL(JSON.stringify(payload), {\n    errorCorrectionLevel: \"M\",\n    margin: 1,\n    scale: 6,\n  });\n}\n"],"names":[],"mappings":";;;;;;AAAA;;AAIO,SAAS,eAAe,KAAwC;QAEnE;IADF,MAAM,SACJ,CAAA,gBAAA,MAAM,MAAM,cAAZ,2BAAA,gBAAiB,uCAAgC,OAAO,QAAQ,CAAC,MAAM,GAAG;IAC5E,OAAO;QACL,GAAG;QACH,KAAK,AAAC,GAAc,OAAZ,QAAO,OAAgB,OAAX,MAAM,IAAI;IAChC;AACF;AAEO,eAAe,UAAU,OAAe;IAC7C,OAAO,yMAAM,CAAC,SAAS,CAAC,KAAK,SAAS,CAAC,UAAU;QAC/C,sBAAsB;QACtB,QAAQ;QACR,OAAO;IACT;AACF","debugId":null}},
    {"offset": {"line": 985, "column": 0}, "map": {"version":3,"sources":["file:///Users/dvskrishna/Business/innovyom/Unify_Trucking_DB/unify_trucking_db/lib/demo-store-remote.ts"],"sourcesContent":["// lib/demo-store-remote.ts (DriverSnapshot type)\nexport interface DriverSnapshot {\n  qrid: string;\n  pinHash: string; // hashed PIN for unlock\n\n  // Basic\n  name: string;\n  dob: string;\n  citizenship: string;\n  residencyCA: string;\n\n  // Licence\n  jurisdiction: string;\n  licenseNo: string;\n  licenseClass: string;\n  licenseExpiry: string;\n\n  // Contact\n  email: string;\n  phone: string;\n\n  // Address\n  postal: string;\n  country: string;\n  region: string;\n  city: string;\n  address1: string;\n  address2?: string;\n\n  // Immigration/Residency\n  prNumber?: string;\n  permitType?: string;\n  uci?: string;\n  permitExpiry?: string;\n\n  // Passport\n  passportCountry?: string;\n  passportNumber?: string;\n\n  // Languages\n  englishLevel: string;\n  otherLanguages: Array<{ language: string; level: string }>;\n\n  // Metadata\n  issuedAt: string;\n}\n\n\nexport async function saveSnapshotRemote(s: DriverSnapshot): Promise<void> {\n  const res = await fetch(\"/api/demo/snapshots\", {\n    method: \"POST\",\n    headers: { \"content-type\": \"application/json\" },\n    body: JSON.stringify(s),\n    cache: \"no-store\",\n  });\n  if (!res.ok) {\n    const j: unknown = await res.json().catch(() => null as unknown);\n    const msg = getErrorMessage(j) ?? `Failed to save snapshot (${res.status})`;\n    throw new Error(msg);\n  }\n}\n\nexport async function loadSnapshotRemote(qrid: string): Promise<DriverSnapshot | null> {\n  const res = await fetch(`/api/demo/snapshots/${encodeURIComponent(qrid)}`, {\n    method: \"GET\",\n    cache: \"no-store\",\n  });\n  if (res.status === 404) return null;\n  if (!res.ok) throw new Error(`Fetch failed (${res.status})`);\n  return (await res.json()) as DriverSnapshot;\n}\n\nfunction getErrorMessage(x: unknown): string | null {\n  if (!x || typeof x !== \"object\") return null;\n  const rec = x as Record<string, unknown>;\n  const e = rec[\"error\"];\n  return typeof e === \"string\" ? e : null;\n}\n"],"names":[],"mappings":"AAAA,iDAAiD;;;;;;;AAgD1C,eAAe,mBAAmB,CAAiB;IACxD,MAAM,MAAM,MAAM,MAAM,uBAAuB;QAC7C,QAAQ;QACR,SAAS;YAAE,gBAAgB;QAAmB;QAC9C,MAAM,KAAK,SAAS,CAAC;QACrB,OAAO;IACT;IACA,IAAI,CAAC,IAAI,EAAE,EAAE;QACX,MAAM,IAAa,MAAM,IAAI,IAAI,GAAG,KAAK,CAAC,IAAM;YACpC;QAAZ,MAAM,MAAM,CAAA,mBAAA,gBAAgB,gBAAhB,8BAAA,mBAAsB,AAAC,4BAAsC,OAAX,IAAI,MAAM,EAAC;QACzE,MAAM,IAAI,MAAM;IAClB;AACF;AAEO,eAAe,mBAAmB,IAAY;IACnD,MAAM,MAAM,MAAM,MAAM,AAAC,uBAA+C,OAAzB,mBAAmB,QAAS;QACzE,QAAQ;QACR,OAAO;IACT;IACA,IAAI,IAAI,MAAM,KAAK,KAAK,OAAO;IAC/B,IAAI,CAAC,IAAI,EAAE,EAAE,MAAM,IAAI,MAAM,AAAC,iBAA2B,OAAX,IAAI,MAAM,EAAC;IACzD,OAAQ,MAAM,IAAI,IAAI;AACxB;AAEA,SAAS,gBAAgB,CAAU;IACjC,IAAI,CAAC,KAAK,OAAO,MAAM,UAAU,OAAO;IACxC,MAAM,MAAM;IACZ,MAAM,IAAI,GAAG,CAAC,QAAQ;IACtB,OAAO,OAAO,MAAM,WAAW,IAAI;AACrC","debugId":null}},
    {"offset": {"line": 1030, "column": 0}, "map": {"version":3,"sources":["file:///Users/dvskrishna/Business/innovyom/Unify_Trucking_DB/unify_trucking_db/lib/uuid.ts"],"sourcesContent":["// RFC4122 v4 UUID with fallbacks for older browsers / non-secure contexts.\nexport function uuidv4(): string {\n  // Modern browsers with Crypto.randomUUID\n  if (typeof crypto !== \"undefined\") {\n    const c = crypto as Crypto & { randomUUID?: () => string };\n    if (typeof c.randomUUID === \"function\") {\n      return c.randomUUID();\n    }\n    // Web Crypto fallback\n    if (typeof c.getRandomValues === \"function\") {\n      const bytes = new Uint8Array(16);\n      c.getRandomValues(bytes);\n      // Per RFC4122 section 4.4\n      const b6 = bytes[6] ?? 0;\n      bytes[6] = (b6 & 0x0f) | 0x40; // version 4\n      const b8 = bytes[8] ?? 0;\n      bytes[8] = (b8 & 0x3f) | 0x80; // variant 10\n      const hex = Array.from(bytes, (b) => b.toString(16).padStart(2, \"0\")).join(\"\");\n      return `${hex.slice(0, 8)}-${hex.slice(8, 12)}-${hex.slice(12, 16)}-${hex.slice(16, 20)}-${hex.slice(20)}`;\n    }\n  }\n  // Last-resort (not cryptographically strong)\n  return \"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx\".replace(/[xy]/g, (c) => {\n    const r = (Math.random() * 16) | 0;\n    const v = c === \"x\" ? r : (r & 0x3) | 0x8;\n    return v.toString(16);\n  });\n}\n"],"names":[],"mappings":"AAAA,2EAA2E;;;;;AACpE,SAAS;IACd,yCAAyC;IACzC,IAAI,OAAO,WAAW,aAAa;QACjC,MAAM,IAAI;QACV,IAAI,OAAO,EAAE,UAAU,KAAK,YAAY;YACtC,OAAO,EAAE,UAAU;QACrB;QACA,sBAAsB;QACtB,IAAI,OAAO,EAAE,eAAe,KAAK,YAAY;YAC3C,MAAM,QAAQ,IAAI,WAAW;YAC7B,EAAE,eAAe,CAAC;gBAEP;YADX,0BAA0B;YAC1B,MAAM,KAAK,CAAA,UAAA,KAAK,CAAC,EAAE,cAAR,qBAAA,UAAY;YACvB,KAAK,CAAC,EAAE,GAAG,AAAC,KAAK,OAAQ,MAAM,YAAY;gBAChC;YAAX,MAAM,KAAK,CAAA,WAAA,KAAK,CAAC,EAAE,cAAR,sBAAA,WAAY;YACvB,KAAK,CAAC,EAAE,GAAG,AAAC,KAAK,OAAQ,MAAM,aAAa;YAC5C,MAAM,MAAM,MAAM,IAAI,CAAC,OAAO,CAAC,IAAM,EAAE,QAAQ,CAAC,IAAI,QAAQ,CAAC,GAAG,MAAM,IAAI,CAAC;YAC3E,OAAO,AAAC,GAAqB,OAAnB,IAAI,KAAK,CAAC,GAAG,IAAG,KAAuB,OAApB,IAAI,KAAK,CAAC,GAAG,KAAI,KAAwB,OAArB,IAAI,KAAK,CAAC,IAAI,KAAI,KAAwB,OAArB,IAAI,KAAK,CAAC,IAAI,KAAI,KAAiB,OAAd,IAAI,KAAK,CAAC;QACvG;IACF;IACA,6CAA6C;IAC7C,OAAO,uCAAuC,OAAO,CAAC,SAAS,CAAC;QAC9D,MAAM,IAAI,AAAC,KAAK,MAAM,KAAK,KAAM;QACjC,MAAM,IAAI,MAAM,MAAM,IAAI,AAAC,IAAI,MAAO;QACtC,OAAO,EAAE,QAAQ,CAAC;IACpB;AACF","debugId":null}},
    {"offset": {"line": 1071, "column": 0}, "map": {"version":3,"sources":["file:///Users/dvskrishna/Business/innovyom/Unify_Trucking_DB/unify_trucking_db/lib/security.ts"],"sourcesContent":["// lib/security.ts\nimport { createHash } from \"crypto\";\n\n/**\n * Hashes a PIN securely using SHA-256.\n * (For real production, use bcrypt or argon2 with salt.)\n */\nexport function hashPin(pin: string): string {\n  if (!pin) return \"\";\n  return createHash(\"sha256\").update(pin).digest(\"hex\");\n}\n\n/**\n * Verify a PIN against stored hash.\n */\nexport function verifyPin(pin: string, hash: string): boolean {\n  return hashPin(pin) === hash;\n}\n"],"names":[],"mappings":"AAAA,kBAAkB;;;;;;;AAClB;;AAMO,SAAS,QAAQ,GAAW;IACjC,IAAI,CAAC,KAAK,OAAO;IACjB,OAAO,IAAA,yTAAU,EAAC,UAAU,MAAM,CAAC,KAAK,MAAM,CAAC;AACjD;AAKO,SAAS,UAAU,GAAW,EAAE,IAAY;IACjD,OAAO,QAAQ,SAAS;AAC1B","debugId":null}},
    {"offset": {"line": 1094, "column": 0}, "map": {"version":3,"sources":["file:///Users/dvskrishna/Business/innovyom/Unify_Trucking_DB/unify_trucking_db/app/driver/register/page.tsx"],"sourcesContent":["\"use client\";\n\nimport { useState } from \"react\";\nimport { useForm, useFieldArray, type Resolver } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport {\n  RegisterSchema,\n  type RegisterValues,\n  normalizeForStorage,\n} from \"@/lib/register-schemas\";\nimport DocUploadField from \"@/components/driver/DocUploadField\";\nimport DriverCardPDF from \"@/components/pdf/DriverCardPDF\";\nimport { buildQrPayload, makeQrPng } from \"@/lib/qr\";\nimport { pdf } from \"@react-pdf/renderer\";\nimport Image from \"next/image\";\nimport {\n  saveSnapshotRemote,\n  type DriverSnapshot,\n} from \"@/lib/demo-store-remote\";\nimport { uuidv4 } from \"@/lib/uuid\";\nimport NameFields from \"@/components/inputs/NameFields\";\nimport PhoneInput from \"@/components/inputs/PhoneInput\";\nimport PostalInput from \"@/components/inputs/PostalInput\";\nimport LicenceInput from \"@/components/inputs/LicenceInput\";\nimport StatusWizard from \"@/components/inputs/StatusWizard\";\nimport LicenseClassSelect from \"@/components/inputs/LicenseClassSelect\";\nimport CountrySelect from \"@/components/inputs/CountrySelect\";\nimport PassportInput from \"@/components/inputs/PassportInput\";\nimport AddressCountrySelect from \"@/components/inputs/AddressCountrySelect\";\nimport RegionSelect from \"@/components/inputs/RegionSelect\";\nimport { hashPin } from \"@/lib/security\";\n\n// --- Helper: Generate 4-char alphanumeric PIN\nfunction generatePin(): string {\n  const chars = \"ABCDEFGHJKLMNPQRSTUVWXYZ23456789\"; // avoid 0/O, 1/I\n  let pin = \"\";\n  for (let i = 0; i < 4; i++) {\n    pin += chars[Math.floor(Math.random() * chars.length)];\n  }\n  return pin;\n}\n\nexport default function RegisterPage() {\n  const {\n    register,\n    handleSubmit,\n    control,\n    formState: { errors },\n    watch,\n    setValue,\n  } = useForm<RegisterValues>({\n    resolver: zodResolver(RegisterSchema) as unknown as Resolver<RegisterValues>,\n    defaultValues: {\n      englishLevel: \"Conversational\",\n      phoneCountry: \"CA\",\n      citizenship: \"Canadian Citizen\",\n      residencyCA: \"Citizen\",\n      consentDate: new Date().toISOString().slice(0, 10),\n      certifyAccurate: false,\n      otherLanguages: [],\n    },\n  });\n\n  const { fields: work, append: addWork, remove: removeWork } = useFieldArray({\n    control,\n    name: \"work\",\n  });\n\n  const [submitting, setSubmitting] = useState(false);\n  const [qrPng, setQrPng] = useState<string | null>(null);\n  const [pdfUrl, setPdfUrl] = useState<string | null>(null);\n  const [qrid, setQrid] = useState<string | null>(null);\n  const [submitError, setSubmitError] = useState<string | null>(null);\n  const [errorSummary, setErrorSummary] = useState<string[] | null>(null);\n  const [generatedPin, setGeneratedPin] = useState<string | null>(null);\n\n  const citizenship = watch(\"citizenship\");\n  const residency = watch(\"residencyCA\");\n  const passportCountry = watch(\"passportCountry\");\n  const needPassport = citizenship !== \"Canadian Citizen\";\n  const needPermit = residency === \"Work Permit\" || residency === \"Study Permit\";\n  const needPR = residency === \"Permanent Resident\";\n\n  const fullName = [watch(\"givenName\") || \"\", watch(\"middleName\") || \"\", watch(\"surname\") || \"\"]\n    .filter(Boolean)\n    .join(\" \");\n\n  async function onSubmit(values: RegisterValues) {\n    setSubmitting(true);\n    try {\n      setSubmitError(null);\n      setErrorSummary(null);\n      const storeReady = normalizeForStorage(values);\n\n      const id = uuidv4();\n      setQrid(id);\n\n      // Generate random PIN\n      const pin = generatePin();\n      setGeneratedPin(pin);\n\n      const payload = buildQrPayload({ qrid: id, origin: window.location.origin });\n      const png = await makeQrPng(payload);\n      setQrPng(png);\n\n      const snap: DriverSnapshot = {\n        qrid: id,\n        pinHash: hashPin(pin), // securely store\n\n        name: [storeReady.givenName, storeReady.middleName, storeReady.surname]\n          .filter(Boolean)\n          .join(\" \"),\n        dob: storeReady.dob,\n        citizenship: storeReady.citizenship,\n        residencyCA: storeReady.residencyCA,\n\n        jurisdiction: storeReady.jurisdiction,\n        licenseNo: storeReady.licenseNo,\n        licenseClass: storeReady.licenseClass,\n        licenseExpiry: storeReady.licenseExpiry,\n\n        email: storeReady.email,\n        phone: storeReady.phone,\n\n        postal: storeReady.postal,\n        country: storeReady.addressCountry,\n        region: storeReady.region,\n        city: storeReady.city,\n        address1: storeReady.address1,\n        address2: storeReady.address2,\n\n        prNumber: storeReady.prNumber,\n        permitType: storeReady.permitType,\n        uci: storeReady.uci,\n        permitExpiry: storeReady.permitExpiry,\n\n        passportCountry: storeReady.passportCountry,\n        passportNumber: storeReady.passportNumber,\n\n        englishLevel: storeReady.englishLevel,\n        otherLanguages: storeReady.otherLanguages,\n\n        issuedAt: new Date().toISOString(),\n      };\n\n      await saveSnapshotRemote(snap);\n\n      const doc = <DriverCardPDF name={snap.name} qrPng={png} />;\n      const blob = await pdf(doc).toBlob();\n      const url = URL.createObjectURL(blob);\n      setPdfUrl(url);\n    } catch (e) {\n      const msg = e instanceof Error ? e.message : String(e);\n      setSubmitError(msg);\n      if (typeof window !== \"undefined\")\n        window.scrollTo({ top: 0, behavior: \"smooth\" });\n    } finally {\n      setSubmitting(false);\n    }\n  }\n\n  function onInvalid(errs: import(\"react-hook-form\").FieldErrors<RegisterValues>) {\n    const msgs: string[] = [];\n    const pushMsg = (v: unknown) => {\n      if (!v) return;\n      if (typeof v === \"string\") msgs.push(v);\n    };\n    const order: Array<keyof RegisterValues> = [\n      \"givenName\",\"surname\",\"jurisdiction\",\"licenseNo\",\"licenseClass\",\"licenseExpiry\",\"dob\",\"email\",\"phone\",\"postal\",\"citizenship\",\"residencyCA\",\"prNumber\",\"permitType\",\"uci\",\"passportCountry\",\"passportNumber\",\"docLicenseFront\",\"docLicenseBack\",\"docHealthCard\",\"docPR\",\"docPassport\",\"docPermit\",\"consentName\",\"consentDate\",\"consentAbstract\",\"certifyAccurate\",\n    ];\n    for (const k of order) {\n      const issue = (errs as Record<string, any>)[k]?.message as string | undefined;\n      if (issue) pushMsg(issue);\n    }\n    setErrorSummary(msgs.length ? msgs : [\"Please review the highlighted fields.\"]);\n    const firstKey = order.find((k) => Boolean((errs as Record<string, unknown>)[k]));\n    if (firstKey) {\n      const el = document.querySelector(`[name=\"${String(firstKey)}\"]`) as HTMLElement | null;\n      if (el && typeof el.scrollIntoView === \"function\")\n        el.scrollIntoView({ behavior: \"smooth\", block: \"center\" });\n      if (el && typeof el.focus === \"function\") el.focus();\n    }\n  }\n\n  function safeFileName(base: string) {\n    return base.replace(/[^a-z0-9-_]+/gi, \"_\").slice(0, 40) || \"card\";\n  }\n\n  type FileKeys =\n    | \"docLicenseFront\"\n    | \"docLicenseBack\"\n    | \"docHealthCard\"\n    | \"docPassport\"\n    | \"docPR\"\n    | \"docPermit\";\n\n  function setFile(key: FileKeys, f: File | null) {\n    setValue(key as any, (f ?? undefined) as any, { shouldValidate: true });\n  }\n\n  return (\n    <main className=\"mx-auto max-w-3xl px-4 py-8\">\n      <div className=\"mb-6 rounded border border-emerald-200 bg-emerald-50 px-3 py-2 text-sm text-emerald-900\">\n        Secure submission • QR contains only a random ID • Minimal non-PII metadata is stored temporarily for the verification demo\n      </div>\n\n      <h1 className=\"mb-4 text-2xl font-semibold text-slate-900\">Driver Registration</h1>\n\n      {submitError && (\n        <div className=\"mb-4 rounded border border-amber-300 bg-amber-50 px-3 py-2 text-sm text-amber-900\">\n          {submitError}\n        </div>\n      )}\n      {errorSummary && (\n        <div className=\"mb-4 rounded border border-rose-300 bg-rose-50 px-3 py-2 text-sm text-rose-900\">\n          <p className=\"font-medium\">Please fix the following:</p>\n          <ul className=\"list-inside list-disc\">\n            {errorSummary.slice(0, 6).map((m, i) => (\n              <li key={i}>{m}</li>\n            ))}\n          </ul>\n        </div>\n      )}\n      <form onSubmit={handleSubmit(onSubmit, onInvalid)} className=\"space-y-10\">\n        {/* --- All your existing form fields unchanged --- */}\n        {/* Identity, Contact, Address, StatusWizard, Permit, Passport, Languages, Work, Documents, Consent */}\n      </form>\n\n      {/* Result */}\n      {qrPng && pdfUrl && (\n        <section className=\"mt-10 rounded border border-slate-200 p-4\">\n          <h3 className=\"mb-2 text-base font-medium\">Your QR & Card</h3>\n          <div className=\"flex items-center gap-6\">\n            <Image\n              src={qrPng}\n              alt=\"QR code\"\n              width={160}\n              height={160}\n              className=\"h-40 w-40 border border-slate-200\"\n            />\n            <div className=\"space-y-2\">\n              <a\n                href={pdfUrl}\n                download={`driver-card-${safeFileName(fullName || (qrid?.slice(0, 8) ?? \"card\"))}.pdf`}\n                className=\"inline-flex rounded bg-slate-900 px-4 py-2 text-white hover:bg-slate-800\"\n              >\n                Download Card (PDF)\n              </a>\n              {generatedPin && (\n                <p className=\"text-sm font-mono text-emerald-700\">\n                  Your system-generated PIN: <strong>{generatedPin}</strong>\n                </p>\n              )}\n              <p className=\"text-sm text-slate-600\">\n                Card shows only your name and this QR. The QR contains only a random ID (no personal data).\n                A minimal non-PII snapshot is stored temporarily to enable verification.\n              </p>\n            </div>\n          </div>\n        </section>\n      )}\n    </main>\n  );\n}\n\nfunction Field({ label, err, children }: { label: string; err?: string; children: React.ReactNode }) {\n  return (\n    <label className=\"block\">\n      <span className=\"block text-sm text-slate-700\">{label}</span>\n      {children}\n      {err && <p className=\"text-xs text-rose-600\">{err}</p>}\n    </label>\n  );\n}\n\ntype LangLevel = \"Basic\" | \"Conversational\" | \"Fluent\" | \"Native\";\ntype Row = { language: string; level: LangLevel };\n\nfunction OtherLanguagesRows({\n  value,\n  onChange,\n}: {\n  value: Row[];\n  onChange: (rows: Row[]) => void;\n}) {\n  const rows: Row[] = value ?? [];\n\n  function add() {\n    onChange([...(rows || []), { language: \"\", level: \"Conversational\" }]);\n  }\n\n  function remove(idx: number) {\n    const next = [...rows] as Row[];\n    next.splice(idx, 1);\n    onChange(next);\n  }\n\n  function setRow(idx: number, patch: Partial<Row>) {\n    const next = [...rows] as Row[];\n    next[idx] = { ...next[idx], ...patch } as Row;\n    onChange(next);\n  }\n\n  return (\n    <div className=\"space-y-2\">\n      {rows.map((row, idx) => (\n        <div key={idx} className=\"grid gap-3 sm:grid-cols-3 items-end\">\n          <Field label=\"Other language\">\n            <select\n              value={row.language}\n              onChange={(e) => setRow(idx, { language: e.target.value })}\n              className=\"mt-1 w-full rounded border border-slate-200 bg-slate-50 p-2 text-slate-700\"\n            >\n              <option value=\"\">Select language</option>\n              {[\n                \"Arabic\",\"Bengali\",\"Chinese (Cantonese)\",\"Chinese (Mandarin)\",\"Dutch\",\"English\",\"Farsi\",\"French\",\"German\",\n                \"Gujarati\",\"Hebrew\",\"Hindi\",\"Italian\",\"Japanese\",\"Korean\",\"Malay\",\"Marathi\",\"Panjabi (Punjabi)\",\"Polish\",\n                \"Portuguese\",\"Punjabi\",\"Russian\",\"Spanish\",\"Tagalog\",\"Tamil\",\"Telugu\",\"Thai\",\"Turkish\",\"Ukrainian\",\"Urdu\",\"Vietnamese\",\n              ].map((l) => (\n                <option key={l} value={l}>\n                  {l}\n                </option>\n              ))}\n            </select>\n          </Field>\n          <Field label=\"Level\">\n            <select\n              value={row.level}\n              onChange={(e) => setRow(idx, { level: e.target.value as LangLevel })}\n              className=\"mt-1 w-full rounded border border-slate-300 p-2\"\n            >\n              <option>Basic</option>\n              <option>Conversational</option>\n              <option>Fluent</option>\n              <option>Native</option>\n            </select>\n          </Field>\n          <div className=\"flex items-end\">\n            <button\n              type=\"button\"\n              onClick={() => remove(idx)}\n              className=\"ml-auto rounded border px-3 py-2 text-sm hover:bg-slate-50\"\n            >\n              Remove\n            </button>\n          </div>\n        </div>\n      ))}\n      <div className=\"flex\">\n        <button\n          type=\"button\"\n          onClick={add}\n          className=\"ml-auto inline-flex items-center gap-2 rounded bg-slate-900 px-3 py-2 text-sm text-white hover:bg-slate-800\"\n          title=\"Add another language\"\n        >\n          <span>+ Add language</span>\n        </button>\n      </div>\n    </div>\n  );\n}\n"],"names":[],"mappings":"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","debugId":null}}]
}